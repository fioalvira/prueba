// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(ObjectSimulatorDbContext))]
    [Migration("20250414152101_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Atribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Access")
                        .HasColumnType("int");

                    b.Property<Guid?>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DataType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Atributes");
                });

            modelBuilder.Entity("Domain.LocalVariable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MethodId");

                    b.ToTable("LocalVariables");
                });

            modelBuilder.Entity("Domain.Method", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Access")
                        .HasColumnType("int");

                    b.Property<Guid?>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsAbstract")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSealed")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReturnType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Methods");
                });

            modelBuilder.Entity("Domain.Parameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Access")
                        .HasColumnType("int");

                    b.Property<int?>("DataType")
                        .HasColumnType("int");

                    b.Property<Guid?>("MethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MethodId");

                    b.ToTable("Parameters");
                });

            modelBuilder.Entity("Domain.Type", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int?>("TypeData")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Types");

                    b.HasDiscriminator().HasValue("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MethodMethod", b =>
                {
                    b.Property<Guid>("InvokedMethodsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MethodId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InvokedMethodsId", "MethodId");

                    b.HasIndex("MethodId");

                    b.ToTable("MethodMethod");
                });

            modelBuilder.Entity("Domain.Class", b =>
                {
                    b.HasBaseType("Domain.Type");

                    b.Property<int?>("Access")
                        .HasColumnType("int");

                    b.Property<Guid?>("BaseClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsAbstract")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSealed")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("BaseClassId")
                        .IsUnique()
                        .HasFilter("[BaseClassId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Class");
                });

            modelBuilder.Entity("Domain.Atribute", b =>
                {
                    b.HasOne("Domain.Class", null)
                        .WithMany("ClassAtributes")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.LocalVariable", b =>
                {
                    b.HasOne("Domain.Method", null)
                        .WithMany("MethodLocalVariables")
                        .HasForeignKey("MethodId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Method", b =>
                {
                    b.HasOne("Domain.Class", null)
                        .WithMany("ClassMethods")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Parameter", b =>
                {
                    b.HasOne("Domain.Method", null)
                        .WithMany("MethodParameters")
                        .HasForeignKey("MethodId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MethodMethod", b =>
                {
                    b.HasOne("Domain.Method", null)
                        .WithMany()
                        .HasForeignKey("InvokedMethodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Method", null)
                        .WithMany()
                        .HasForeignKey("MethodId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Class", b =>
                {
                    b.HasOne("Domain.Class", "BaseClass")
                        .WithOne()
                        .HasForeignKey("Domain.Class", "BaseClassId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BaseClass");
                });

            modelBuilder.Entity("Domain.Method", b =>
                {
                    b.Navigation("MethodLocalVariables");

                    b.Navigation("MethodParameters");
                });

            modelBuilder.Entity("Domain.Class", b =>
                {
                    b.Navigation("ClassAtributes");

                    b.Navigation("ClassMethods");
                });
#pragma warning restore 612, 618
        }
    }
}
